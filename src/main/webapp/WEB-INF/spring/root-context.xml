<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

	<!-- Root Context: defines shared resources visible to all other web components -->

	<!-- 객체가 하나 만들어짐 -->
	<!-- <bean id="testS" class="com.sinc.project.test.service.TestServiceImpl"> 
		프로퍼티 하나가 세터 메소드를 의미한다. 그래서 DaoImpl에 setDao가 있어야한다. ref가 밑에 bean테이블의 dao id의미하고. 
		class가 네임 프로퍼티 또는 세터 인젝션 <property name="dao" ref="dao" /> 컨스트럭터 인젝션 : 이 
		인자 하나당 하나의 인수를 컨스트럭터에 넘긴다. 이 태그를 3개 쓰면 3개를 넘기는것 <constructor-arg ref="dao"/> 
		</bean> -->

	<!-- <bean id="dao" class="com.sinc.project.test.model.dao.DaoImpl"></bean> -->




	<!-- 1. DataSource 설정추가하고 JUnit 연결 테스트하기 -->
	<!-- 데이터소스 객체를 만들고, 프로퍼티태그로 디비에 설정정보(인자로)를 넘겨준다. -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName"
			value="oracle.jdbc.driver.OracleDriver"></property>
		<property name="url"
			value="jdbc:oracle:thin:@127.0.0.1:1521:xe"></property>
		<property name="username" value="hr"></property>
		<property name="password" value="hr"></property>
	</bean>

	<!-- 2. MyBatis 연동을 위한 추가 -->
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 3. resource에 mybatis-config.xml 만들고 추가하기 -->
		<!-- 얘는 resources에 있기 때문에 classpath를 명시해줘야한다 -->
		<property name="configLocation"
			value="classpath:mybatis-config.xml" />
		<!-- 4. resource에 mappers 디렉토리를 만들고 추가하기 mybatis dqm -->
		<property name="mapperLocations"
			value="classpath:mappers/**/*Mapper.xml" />
	</bean>

	<!-- 세션템플릿으로 팩토리를 넘김-> dao가 디비정보를 넘길 수 있음 -->
	<!-- 6. @repository 에서 의존성 주입을 위한 설정 -->
	<bean id="sqlSession"
		class="org.mybatis.spring.SqlSessionTemplate"
		destroy-method="clearCache">
		<constructor-arg name="sqlSessionFactory"
			ref="sqlSessionFactory"></constructor-arg>
	</bean>
	
	<!-- 어노테이션을 스캔할 수 있도록해줌. 해당 페이지에서. -->
	<context:component-scan base-package="com.sinc.project.**" />
	
	<!-- 어노테이션으로 할 시, 명시해줘야한다. -->
	<aop:aspectj-autoproxy /> <!-- 얘가 있어야 Aspect 어노테이션 찾을 수 있음 . 밑에있는 메소드를 찾을시 호출-->
	<!-- aop -->
<!-- 	<bean id="loginAspect" class="com.sinc.project.aop.common.LoginAspect"/>
	<bean id="serviceTarget" class="com.sinc.project.aop.core.SincServiceImpl"/>
	
	<aop:config>
		<aop:pointcut expression="execution(public * com.sinc.project..*Impl.say*(..))" id="publicMethod"/>
		<aop:aspect id="beforeAspect" ref="loginAspect">
			<aop:before pointcut-ref="publicMethod" method="before"/>
		</aop:aspect>
	</aop:config> -->


</beans>
